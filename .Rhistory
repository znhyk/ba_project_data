data=dasedae)
summary(result)
result<-lm(
wolse_cost/scale~univ_m+floor+banjiha+build_age,
data=dasedae)
summary(result)
dasedae <- read.csv("dasedae_2.csv", header = TRUE)
dasedae <- dasedae[dasedae$junse != 0, ]
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
dasedae$build_age <- 2023 - dasedae$build
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
dasedae$station_km <-  dasedae$station_m/1000
str(dasedae)
result<-lm(
guarantee~station_km+scale+floor+banjiha+build_age,
data=dasedae)
summary(result)
dasedae <- read.csv("dasedae_2.csv", header = TRUE)
dasedae <- dasedae[dasedae$junse != 0, ]
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
dasedae$build_age <- 2023 - dasedae$build
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
dasedae$station_km <-  dasedae$station_m/1000
dasedae$univ_km <-  dasedae$univ_m/1000
result<-lm(
guarantee~station_km+scale+floor+banjiha+build_age,
data=dasedae)
summary(result)
dasedae <- dasedae[dasedae$guarantee < 20000, ]
result<-lm(
guarantee~station_km+scale+floor+banjiha+build_age,
data=dasedae)
summary(result)
dasedae <- read.csv("dasedae_2.csv", header = TRUE)
dasedae <- dasedae[dasedae$junse != 0, ]
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE)
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE, fileEncoding = "UTF-8-SIG")
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(dasedae, file = "dasedae_junse.csv", row.names = FALSE, fileEncoding = "CP949")
dasedae <- read.csv("dasedae_add_bd.csv", header = TRUE)
str(dasedae)
cor(dasedae$gbd_m, dasedae$guarantee)
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
cor(dasedae$gbd_m, dasedae$guarantee)
cor(dasedae$ybd_m, dasedae$guarantee)
cor(dasedae$cbd_m, dasedae$guarantee)
plot(x=dasedae$gbd_m, y=dasedae$guarantee, xlab="강남m", ylab="가격")
plot(x=dasedae$gbd_m/1000, y=dasedae$guarantee, xlab="강남m", ylab="가격")
plot(x=dasedae$gbd_m/1000, y=dasedae$guarantee/dasedae$scale, xlab="강남km", ylab="m2당당가격")
result<-lm(guarantee/scale~gbd_m/1000, data=dasedae)
result<-lm(guarantee/scale~gbd_m/1000, data=dasedae)
result<-lm(guarantee~gbd_m, data=dasedae)
summary(result)
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
dasedae$scaled_guarantee <- dasedae$guarantee/dasedae$scale
result<-lm(
scaled_guarantee~gbd_km, data=dasedae
)
abline(result)
summary(result)
dasedae$univ_km <-  dasedae$univ_m/1000
dasedae <- read.csv("dasedae_add_bd_fixed.csv", header = TRUE)
dasedae <- read.csv("dasedae_add_bd_fixed.csv", header = TRUE)
str(dasedae)
dasedae <- dasedae[dasedae$junse != 0, ]
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
plot(x=dasedae$gbd_m/1000, y=dasedae$guarantee/dasedae$scale, xlab="강남km", ylab="m2당당가격")
cor(dasedae$gbd_m, dasedae$guarantee)
cor(dasedae$gbd_m, dasedae$guarantee/dasedae$scale)
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
dasedae$scaled_guarantee <- dasedae$guarantee/dasedae$scale
dasedae$build_age <- 2023 - dasedae$build
dasedae$station_km <-  dasedae$station_m/1000
dasedae$univ_km <-  dasedae$univ_m/1000
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
result<-lm(
scaled_guarantee~gbd_km+ybd_km+cbd_km+univ_km+station_km, data=dasedae
)
summary(result)
result<-lm(
scaled_guarantee~build_age+banjiha+gbd_km+univ_km+station_km, data=dasedae
)
summary(result)
result<-lm(
guarantee~scale+build_age+banjiha+gbd_km+univ_km+station_km, data=dasedae
)
summary(result)
result<-lm(
guarantee~scale+build_age+floor+banjiha+gbd_km+univ_km+station_km, data=dasedae
)
summary(result)
result<-lm(
guarantee~scale+build_age+floor+banjiha+cbd_km+gbd_km+ybd_km+univ_km+station_km, data=dasedae
)
summary(result)
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
str(dasedae)
#6-4
dasedae$total_time_gbd_h <- dasedae$total_time_gbd/3600
result <- lm(
guarantee~scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
result <- lm(
guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
result <- lm(
guarantee~north_hangang+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
result <- lm(
guarantee~district+north_hangang+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
result <- lm(
guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
dasedae <- dasedae[dasedae$guarantee < 20000, ]
#데이터 나누기
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
summary(model)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dasedae <- dasedae[dasedae$guarantee < 15000, ]
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
dasedae$total_time_gbd_h <- dasedae$total_time_gbd/3600
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
#강남역까지 통근시간
dasedae$total_time_gbd_h <- dasedae$total_time_gbd/3600
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dasedae <- dasedae[dasedae$guarantee < 15000, ]
#모델3
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
#데이터 나누기
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
#모델3
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
mse
validation_df$predicted
str(validation)
str(validation_Df)
str(validation_df)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
#View(validation_df[,c("Id","Price","predicted", "residuals")])
#한줄에 실제,예측,상관,잔차 다 볼 수 있음
#MSE
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
#모델3
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, dasedae)
summary(model)
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
#강남역까지 통근시간
dasedae$total_time_gbd_h <- dasedae$total_time_gbd/3600
result <- lm(
guarantee~scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
result <- lm(
guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
summary(model)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dasedae <- dasedae[dasedae$guarantee < 30000, ]
#scale이 특정수치를 넘으면 레코드 제외
dasedae <- dasedae[dasedae$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
#강남역까지 통근시간
dasedae$total_time_gbd_h <- dasedae$total_time_gbd/3600
result <- lm(
guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
summary(model)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#term이 '-'인 경우 레코드 제외
dasedae <- dasedae[dasedae$term != '-', ]
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dasedae <- dasedae[dasedae$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dasedae <- dasedae[dasedae$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
#강남역까지 통근시간
dasedae$total_time_gbd_h <- dasedae$total_time_gbd/3600
result <- lm(
guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, data=dasedae
)
summary(result)
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
model <- lm(guarantee~district+scale+build_age+banjiha+station_km+univ_km+gbd_km+total_time_gbd_h, train_df)
summary(model)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
result <- lm(
guarantee~district+scale+build_age+banjiha+station_km+univ_km, data=dasedae
)
summary(result)
dasedae <- read.csv("dasedae_add_commute3.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dasedae <- dasedae[dasedae$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dasedae <- dasedae[dasedae$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dasedae <- dasedae[dasedae$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#반지하여부를 저장
dasedae$banjiha <- ifelse(dasedae$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
#제곱미터당 가격 칼럼 생성
dasedae$scaled_guarantee <- dasedae$guarantee/dasedae$scale
#데이터 나누기
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
#잔차값을 1,0으로 변환하여 저장(under_rated, 1일때 rh평가됨)
validation_df$under_rated <- ifelse(validation_df$residuals < 0, 1, 0)
#엑셀로 저장
install.packages("writexl")
# 패키지 불러오기
library(writexl)
write_xlsx(validation_df, path = "dasedae_predicted_residual.xlsx")
dasedae <- read.csv("dasedae_last.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dasedae$cbd_km <- dasedae$cbd_m/1000
dasedae$gbd_km <- dasedae$gbd_m/1000
dasedae$ybd_km <- dasedae$ybd_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
rmse <- sqrt(mse)
rmse
dagagu <- read.csv("dagagu_last3.csv", header = TRUE,fileEncoding = "cp949")
dasedae <- read.csv("dasedae_last.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dasedae <- dasedae[dasedae$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dasedae <- dasedae[dasedae$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dasedae$guarantee <- as.integer(gsub(",", "", dasedae$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dasedae <- dasedae[dasedae$guarantee < 30000, ]
#scale이 특정수치를 넘으면 레코드 제외
dasedae <- dasedae[dasedae$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dasedae$build_age <- 2023 - dasedae$build
#결측치 삭제
dasedae <- dasedae[complete.cases(dasedae$build_age), ]
#역과의 거리를 km로 변환
dasedae$station_km <-  dasedae$station_m/1000
#대학과의 거리를 km로 변환
dasedae$univ_km <-  dasedae$univ_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dasedae)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dasedae), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dasedae[train_index,]
validation_df <- dasedae[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
