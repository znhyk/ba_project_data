#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
model <- lm(guarantee~district+scale+build_age+station_km+univ_km+gbd_km, dagagu)
summary(model)
dagagu <- read.csv("dagagu_add_district.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
dagagu <- read.csv("dagagu_add_district.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#제곱미터당 가격 칼럼 생성
dagagu$scaled_guarantee <- dagagu$guarantee/dagagu$scale
num_rows <- round(nrow(dagagu)*0.7)
train_index <- sample(1:nrow(dagagu), num_rows)
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
str(validation_df)
#잔차값을 1,0으로 변환하여 저장(under_rated, 1일때 rh평가됨)
dagagu$under_rated <- ifelse(dagagu$residuals < 0, 1, 0)
validation_df <- ifelse(validation_df$residuals <0, 1, 0)
write.csv(dagagu, file = "predicted_dagagu_residual.csv", row.names = FALSE)
write.csv(validation_df, file = "predicted_dagagu_residual.csv", row.names = FALSE)
validation_df
#잔차값을 1,0으로 변환하여 저장(under_rated, 1일때 rh평가됨)
validation_df$under_rated <- ifelse(validation_df$residuals < 0, 1, 0)
traind_df\
traind_df
train_df
#table(is.na(dagagu$build_age))
#dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#validation_df <- validation_df[complete.cases(dagagu$build_age), ]
validation_df$predicted <- predict(model, validation_df)
dagagu <- read.csv("dagagu_add_district.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#제곱미터당 가격 칼럼 생성
dagagu$scaled_guarantee <- dagagu$guarantee/dagagu$scale
#데이터 나누기
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
#table(is.na(dagagu$build_age))
#dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#validation_df <- validation_df[complete.cases(dagagu$build_age), ]
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
#View(validation_df[,c("Id","Price","predicted", "residuals")])
#한줄에 실제,예측,상관,잔차 다 볼 수 있음
#MSE
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
#잔차값을 1,0으로 변환하여 저장(under_rated, 1일때 rh평가됨)
validation_df$under_rated <- ifelse(validation_df$residuals < 0, 1, 0)
View(validation_df)
View(validation_df)
write.csv(validation_df, file = "predicted_dagagu_residual.csv", row.names = FALSE)
rmse
str(validation_df$under_rated)
summary(validation_df$under_rated)
View(validation_df)
write.csv(validation_df, file = "predicted_dagagu_residual.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(validation_df, file = "predicted_dagagu_residual.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(validation_df, file = "predicted_dagagu_residual2.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(validation_df, file = "predicted_dagagu_residual2.csv", row.names = FALSE, fileEncoding = "UTF-8")
dagagu <- read.csv("dagagu_add_district_train.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
#제곱미터당 가격 칼럼 생성
dagagu$scaled_guarantee <- dagagu$guarantee/dagagu$scale
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, dagagu)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
dagagu <- read.csv("dagagu_add_district_train.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#제곱미터당 가격 칼럼 생성
dagagu$scaled_guarantee <- dagagu$guarantee/dagagu$scale
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, dagagu)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
dagagu2 <- read.csv("dagagu_add_district_validation.csv", header = TRUE)
dagagu2$predicted <- predict(model, dagagu2)
dagagu <- read.csv("dagagu_add_district.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#term이 '-'인 경우 레코드 제외
dagagu <- dagagu[dagagu$term != '-', ]
dagagu <- read.csv("dagagu_add_district.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 20000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
#제곱미터당 가격 칼럼 생성
dagagu$scaled_guarantee <- dagagu$guarantee/dagagu$scale
#데이터 나누기
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
#table(is.na(dagagu$build_age))
#dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#validation_df <- validation_df[complete.cases(dagagu$build_age), ]
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
#View(validation_df[,c("Id","Price","predicted", "residuals")])
#한줄에 실제,예측,상관,잔차 다 볼 수 있음
#MSE
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
write.csv(validation_df, file = "predicted_residual.csv", row.names = FALSE, fileEncoding = "UTF-8-BOM")
write.csv(validation_df, file = "predicted_residual.csv", row.names = FALSE, fileEncoding = "UTF-8-SIG")
write.csv(validation_df, file = "predicted_residual.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(validation_df, file = "predicted_residual.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(validation_df, file = "predicted_residual.csv", row.names = FALSE, fileEncoding = "cp949")
write.csv(validation_df, file = "predicted_residual.csv", row.names = FALSE, fileEncoding = "cp949")
write.csv(validation_df, file = "predicted_residual.csv", stringsAsFactors = FALSE,row.names = FALSE, fileEncoding = "UTF-8")
write.csv(dagagu, file = "dagagu_junse.csv", row.names = FALSE)
write.csv(validation_df, file = "predicted_residual.csv", stringsAsFactors = FALSE,row.names = FALSE, fileEncoding = "cp949")
write.csv(validation_df, file = "predicted_residual.csv",row.names = FALSE, fileEncoding = "cp949")
warnings()
validation_df_clean <- data.frame(lapply(validation_df, function(x) gsub("[\",]", "", x)))
write.csv(validation_df_clean, file = "predicted_residual.csv", stringsAsFactors = FALSE,row.names = FALSE, fileEncoding = "UTF-8")
validation_df_clean <- data.frame(lapply(validation_df, function(x) gsub("[\",]", "", x)))
write.csv(validation_df_clean, file = "predicted_residual.csv",row.names = FALSE, fileEncoding = "UTF-8")
#엑셀로 저장
install.packages("writexl")
# 패키지 불러오기
library(writexl)
write_xlsx(validation_df, path = "predicted_residual.xlsx")
#잔차값을 1,0으로 변환하여 저장(under_rated, 1일때 rh평가됨)
validation_df$under_rated <- ifelse(validation_df$residuals < 0, 1, 0)
write_xlsx(validation_df, path = "dagagu_predicted_residual.xlsx")
dagagu <- read.csv("dagagu_last.csv", header = TRUE)
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델1
model <- lm(guarantee~scale+build_age+floor+banjiha+station_km+univ_km+gbd_km, train_df)
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
rmse <- sqrt(mse)
rmse
validation_df$under_rated <- ifelse(validation_df$residuals < 0, 1, 0)
install.packages("writexl")
library(writexl)
write_xlsx(validation_df, path = "dagagu_predicted_residual.xlsx")
write_xlsx(validation_df, path = "dagagu_predicted_residual.xlsx")
dagagu <- read.csv("dagagu_last1.csv", header = TRUE)
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 30000, ]
dagagu <- read.csv("dagagu_last1.csv", header = TRUE)
dagagu <- read.csv("dagagu_last3.csv", header = TRUE)
dagagu <- read.csv("dagagu_last3.csv", header = TRUE)
dagagu <- read.csv("dagagu_last3.csv", header = TRUE,fileEncoding = "cp949")
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 30000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, dagagu)
summary(model)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
summary(validation_df$predicted)
summary(validation_df$residuals)
validation_df <- validation_df[complete.cases(validation_df$residuals), ]
# 제거 후 summary 출력
summary(validation_df$residuals)
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
rmse <- sqrt(mse)
rmse
validation_df$under_rated <- ifelse(validation_df$residuals < 0, 1, 0)
library(writexl)
write_xlsx(validation_df, path = "[hackse]dagagu_predicted_residual.xlsx")
dagagu <- read.csv("dagagu_last3.csv", header = TRUE,fileEncoding = "cp949")
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
summary(validation_df$residuals)
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
rmse <- sqrt(mse)
rmse
dagagu <- read.csv("dagagu_last3.csv", header = TRUE,fileEncoding = "cp949")
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 30000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#각 업무중심과의 거리를 km로 변환
dagagu$cbd_km <- dagagu$cbd_m/1000
dagagu$gbd_km <- dagagu$gbd_m/1000
dagagu$ybd_km <- dagagu$ybd_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
validation_df$predicted <- predict(model, validation_df)
validation_df$residuals <- validation_df$guarantee - validation_df$predicted
#한줄에 실제,예측,상관,잔차 다 볼 수 있음
#MSE
mse <- mean((validation_df$guarantee - validation_df$predicted)^2)
#RMSE
rmse <- sqrt(mse)
rmse
dagagu <- read.csv("dagagu_last3.csv", header = TRUE,fileEncoding = "cp949")
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
dagagu <- read.csv("dagagu_last3.csv", header = TRUE,fileEncoding = "cp949")
#univ_m이 1000을 초과하는 경우 레코드 제외
dagagu <- dagagu[dagagu$univ_m <= 3000, ]
#junse가 0(월세)인 경우 레코드 제외
dagagu <- dagagu[dagagu$junse != 0, ]
#guarantee 열의 쉼표 있는 숫자를 정수로 변환하여 다시 저장
dagagu$guarantee <- as.integer(gsub(",", "", dagagu$guarantee))
#guarantee가 특정수치가 넘어가는 경우 레코드 제외
dagagu <- dagagu[dagagu$guarantee < 30000, ]
#scale이 특정수치를 넘으면 레코드 제외
dagagu <- dagagu[dagagu$scale <= 85, ]
#건물의 연식으로 변환하여 다시 저장
dagagu$build_age <- 2023 - dagagu$build
#결측치 삭제
dagagu <- dagagu[complete.cases(dagagu$build_age), ]
#반지하여부를 저장
#dagagu$banjiha <- ifelse(dagagu$floor <= -1, 1, 0)
#역과의 거리를 km로 변환
dagagu$station_km <-  dagagu$station_m/1000
#대학과의 거리를 km로 변환
dagagu$univ_km <-  dagagu$univ_m/1000
#데이터 나누기
set.seed(123)
num_rows <- round(nrow(dagagu)*0.7)
#0.7을 곱해서 70% 짜르고, 소수점 되면 안되니까 round로 함.
#그러면 정수로 자를 행번호가 나옴
train_index <- sample(1:nrow(dagagu), num_rows)
#sample 명령옳 random sampling해줌.
train_df <- dagagu[train_index,]
validation_df <- dagagu[-train_index,]
#모델4
model <- lm(guarantee~scale+build_age+station_km+univ_km+district, train_df)
summary(model)#잘 안나와도 예측모델이므로 RMSE만 잘 나오면 문제없음
